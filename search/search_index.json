{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>Explore via <code>dir(__builtins__)</code>: Try this in Python to see them all.</p> <pre><code>&gt;&gt;&gt; dir(__builtins__)\n\n['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EncodingWarning', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'aiter', 'all', 'anext', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']\n</code></pre>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"built-in/dir-function/","title":"dir() function","text":""},{"location":"built-in/dir-function/#dir-function","title":"<code>dir()</code> function","text":"<p>The <code>dir()</code> function in Python is a built-in function used to get a list of attributes of an object. It's a powerful tool for introspection, allowing you to explore the properties and methods available for various objects.</p>"},{"location":"built-in/dir-function/#syntax","title":"Syntax:","text":"Python<pre><code>dir([object])\n</code></pre> <ul> <li><code>object</code>: (Optional) The object whose attributes you want to explore. If not provided, it returns the names in the current namespace.</li> </ul>"},{"location":"built-in/dir-function/#how-it-works","title":"How it works:","text":""},{"location":"built-in/dir-function/#without-an-argument","title":"Without an argument:","text":"<p>When used without an argument, <code>dir()</code> returns a list of names in the current scope (local namespace). This includes variables, functions, and imported modules.</p>"},{"location":"built-in/dir-function/#with-an-object","title":"With an object:","text":"<p>When used with an object as an argument, <code>dir()</code> returns a list of attributes and methods defined for that object. This includes attributes defined directly by the object, as well as those inherited from its class and base classes.</p>"},{"location":"built-in/dir-function/#customization","title":"Customization:","text":"<p>If an object has a <code>__dir__()</code> method, <code>dir()</code> will call this method to get the list of attributes. This allows objects with custom attribute access behavior to customize how <code>dir()</code> reports their attributes.</p>"},{"location":"built-in/dir-function/#common-use-cases","title":"Common Use Cases:","text":"<ul> <li>Exploring objects: Discovering what methods and attributes are available for an object.</li> <li>Inspecting modules: Listing the functions and variables defined within a module.</li> <li>Debugging: Checking the names available in a specific scope.</li> <li>Learning: Understanding the functionality of an object or module.</li> </ul>"},{"location":"built-in/dir-function/#examples","title":"Examples:","text":"Python<pre><code># Without an object\nprint(dir())\n\n# With a list object\nmy_list = [1, 2, 3]\nprint(dir(my_list))\n\n# With a string object\nmy_string = \"hello\"\nprint(dir(my_string))\n\n# With a module\nimport math\nprint(dir(math))\n</code></pre> <p>More Advanced Example</p>"},{"location":"built-in/dir-function/#key-points","title":"Key Points:","text":"<ul> <li>The <code>dir()</code> function returns a list of strings, representing the names of attributes and methods.</li> <li>The returned list is sorted alphabetically.</li> <li>It's a valuable tool for understanding the structure and capabilities of Python objects and modules.</li> </ul>"},{"location":"built-in/dir-function/#reference","title":"Reference","text":"<ul> <li>pythoncheatsheet.org: Python dir() built-in function </li> <li>w3schools.com: Python dir() Function</li> <li>programiz.com: Python dir()</li> <li>github.com: python-cheatsheet</li> <li>geeksforgeeks.org: Python: Difference between dir() and help()</li> <li>Python: Difference between dir() and help()</li> </ul>"},{"location":"built-in/overview/","title":"Overview","text":""},{"location":"built-in/overview/#overview","title":"Overview","text":"<p>To master Python, knowing its built-in functions is like having a toolbox where you understand every tool \u2014 when and how to use it. Python has 70+ built-in functions, but here are the most important and frequently used ones every serious Python programmer should know well.</p>"},{"location":"built-in/overview/#core-built-ins-you-must-master","title":"\ud83e\udde0 Core Built-ins You Must Master","text":""},{"location":"built-in/overview/#inspecting-debugging","title":"\ud83d\udd0d Inspecting &amp; Debugging","text":"<ul> <li><code>type()</code> \u2013 Get the type of a value.</li> <li><code>id()</code> \u2013 Unique ID of an object (useful for identity checks).</li> <li><code>dir()</code> \u2013 See what\u2019s inside an object.</li> <li><code>help()</code> \u2013 Get documentation on an object or function.</li> <li><code>vars()</code> \u2013 See <code>__dict__</code> (attributes) of an object.</li> </ul>"},{"location":"built-in/overview/#type-conversion-casting","title":"\ud83d\udd04 Type Conversion &amp; Casting","text":"<ul> <li><code>int()</code>, <code>float()</code>, <code>str()</code>, <code>bool()</code> \u2013 Convert between data types.</li> <li><code>list()</code>, <code>set()</code>, <code>tuple()</code>, <code>dict()</code> \u2013 Create or convert between containers.</li> <li><code>ord()</code> / <code>chr()</code> \u2013 Character-code conversions.</li> <li><code>bin()</code>, <code>hex()</code>, <code>oct()</code> \u2013 Convert integers to binary/hex/oct strings.</li> </ul>"},{"location":"built-in/overview/#loops-and-iterables","title":"\ud83d\udd01 Loops and Iterables","text":"<ul> <li><code>range()</code> \u2013 Create number ranges for loops.</li> <li><code>enumerate()</code> \u2013 Loop with index and value.</li> <li><code>zip()</code> \u2013 Combine multiple iterables element-wise.</li> <li><code>map()</code> \u2013 Apply a function to all items in an iterable.</li> <li><code>filter()</code> \u2013 Filter items using a condition.</li> <li><code>reversed()</code> \u2013 Reverse an iterable.</li> <li><code>sorted()</code> \u2013 Sort anything.</li> <li><code>len()</code> \u2013 Length of an object.</li> </ul>"},{"location":"built-in/overview/#math-numbers","title":"\ud83e\uddee Math &amp; Numbers","text":"<ul> <li><code>sum()</code> \u2013 Sum of a list of numbers.</li> <li><code>min()</code> / <code>max()</code> \u2013 Find smallest/largest.</li> <li><code>abs()</code> \u2013 Absolute value.</li> <li><code>round()</code> \u2013 Round a number.</li> <li><code>pow()</code> \u2013 Power (can also use <code>**</code>).</li> </ul>"},{"location":"built-in/overview/#containers-collections","title":"\ud83d\udce6 Containers &amp; Collections","text":"<ul> <li><code>all()</code> \u2013 True if all elements are true.</li> <li><code>any()</code> \u2013 True if at least one is true.</li> <li><code>isinstance()</code> \u2013 Check if something is of a certain type.</li> <li><code>slice()</code> \u2013 Create slice objects (used for indexing).</li> </ul>"},{"location":"built-in/overview/#functional-programming","title":"\ud83d\udd27 Functional Programming","text":"<ul> <li><code>lambda</code> \u2013 Create anonymous functions.</li> <li><code>callable()</code> \u2013 Check if an object can be called like a function.</li> <li><code>eval()</code> \u2013 Evaluate a string as Python code (careful!).</li> <li><code>exec()</code> \u2013 Execute dynamically created Python code (dangerous!).</li> </ul>"},{"location":"built-in/overview/#object-handling","title":"\ud83d\uddc3\ufe0f Object Handling","text":"<ul> <li><code>getattr()</code>, <code>setattr()</code>, <code>hasattr()</code>, <code>delattr()</code> \u2013 Dynamic attribute access.</li> <li><code>staticmethod()</code>, <code>classmethod()</code> \u2013 Used in classes.</li> <li><code>property()</code> \u2013 Define managed attributes in classes.</li> </ul>"},{"location":"built-in/overview/#io-inputoutput","title":"\u26cf\ufe0f I/O (Input/Output)","text":"<ul> <li><code>print()</code> \u2013 Output to console.</li> <li><code>input()</code> \u2013 Get user input.</li> </ul>"},{"location":"built-in/overview/#structure-and-flow","title":"\ud83e\uddf1 Structure and Flow","text":"<ul> <li><code>compile()</code> \u2013 Turn source code into code objects.</li> <li><code>globals()</code> / <code>locals()</code> \u2013 Access global/local symbol tables.</li> <li><code>__import__()</code> \u2013 Dynamic import of a module.</li> </ul>"},{"location":"built-in/overview/#optional-but-useful","title":"\ud83e\uddf0 Optional but Useful","text":"<ul> <li><code>next()</code> \u2013 Get next item from an iterator.</li> <li><code>iter()</code> \u2013 Turn something into an iterator.</li> <li><code>memoryview()</code> \u2013 Access byte-level data efficiently.</li> <li><code>format()</code> \u2013 String formatting.</li> </ul>"},{"location":"built-in/overview/#what-you-should-do","title":"\u2705 What You Should Do","text":"<ol> <li>Read the docs: Python Built-in Functions</li> <li>Practice in real code: Use them in small projects or exercises.</li> <li>Explore via <code>dir(__builtins__)</code>: Try this in Python to see them all.</li> </ol> <p>Would you like a cheat sheet or practice problems to go with these?</p>"},{"location":"cheatsheet/concept/","title":"Concept","text":""},{"location":"cheatsheet/concept/#concept","title":"Concept","text":""},{"location":"cheatsheet/concept/#core-deep-python-concepts","title":"\ud83d\udd25 Core Deep Python Concepts","text":"<ol> <li> <p>Iterators &amp; Generators</p> <ul> <li>Iterators: Any object with <code>__iter__()</code> and <code>__next__()</code>.</li> <li>Generators: Functions using <code>yield</code>, useful for lazy evaluation and large data streams.</li> </ul> </li> <li> <p>List Comprehensions &amp; Generator Expressions</p> <ul> <li>Elegant, fast way to write loops and filters.</li> </ul> <pre><code>squares = [x**2 for x in range(10) if x % 2 == 0]\n</code></pre> </li> <li> <p>Decorators</p> <ul> <li>Functions that wrap other functions.</li> <li>Used for logging, authentication, memoization, etc.</li> </ul> <pre><code>def decorator(func):\n    def wrapper():\n        print(\"Before\")\n        func()\n        print(\"After\")\n    return wrapper\n\n@decorator\ndef greet():\n    print(\"Hello\")\n</code></pre> </li> <li> <p>Context Managers (<code>with</code>)</p> <ul> <li>Handle setup/cleanup automatically, like file operations or DB sessions.</li> </ul> <pre><code>with open(\"file.txt\") as f:\n    content = f.read()\n</code></pre> </li> <li> <p>Asyncio / Asynchronous Programming</p> <ul> <li>Python\u2019s native async system for concurrent, non-blocking code.</li> <li>Equivalent to JS Promises + <code>async/await</code>.</li> </ul> <pre><code>import asyncio\n\nasync def fetch():\n    await asyncio.sleep(1)\n    return \"data\"\n\nasyncio.run(fetch())\n</code></pre> </li> <li> <p>OOP: Classes, Inheritance, Magic Methods</p> <ul> <li>Use class, <code>__init__</code>, and <code>self</code>.</li> <li>Magic methods like <code>__str__</code>, <code>__len__</code>, <code>__eq__</code>, etc., let you customize behavior.</li> </ul> <pre><code>class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def __str__(self):\n        return f\"Dog: {self.name}\"\n</code></pre> </li> <li> <p>Typing &amp; Type Hints</p> <ul> <li>Optional but useful for large projects.</li> </ul> <pre><code>def add(x: int, y: int) -&gt; int:\n    return x + y\n</code></pre> <p>Use tools like mypy to check types statically.</p> </li> <li> <p>Functional Programming</p> <ul> <li>Python supports <code>map</code>, <code>filter</code>, <code>reduce</code>, and <code>lambda</code>.</li> <li>But idiomatic Python favors list comprehensions over <code>map</code>/<code>filter</code>.</li> </ul> </li> <li> <p>Error Handling &amp; Custom Exceptions</p> <ul> <li>Raise your own exceptions and create custom classes.</li> </ul> <pre><code>class MyError(Exception):\n    pass\n\nraise MyError(\"Something went wrong\")\n</code></pre> </li> <li> <p>Modules, Packages, and Imports</p> <ul> <li>Understand <code>__init__.py</code>, relative vs absolute imports, and how to structure large apps.</li> </ul> </li> <li> <p>Data Classes &amp; NamedTuples</p> <ul> <li>Concise syntax for classes that hold data.</li> </ul> <pre><code>from dataclasses import dataclass\n\n@dataclass\nclass User:\n    name: str\n    age: int\n</code></pre> </li> <li> <p>Metaprogramming &amp; Introspection</p> <ul> <li>Use <code>getattr</code>, <code>setattr</code>, <code>hasattr</code>, <code>dir</code>, <code>type</code>, <code>isinstance</code> dynamically.</li> <li>Advanced topic, useful for frameworks and libraries.</li> </ul> </li> <li> <p>Concurrency &amp; Parallelism</p> <ul> <li>Use <code>threading</code>, <code>multiprocessing</code>, and <code>concurrent.futures</code>.</li> <li>Different from <code>asyncio</code>; for CPU-bound vs I/O-bound tasks.</li> </ul> </li> <li> <p>File I/O, CSV, JSON, and Pickling</p> <ul> <li>Master working with files, data serialization (<code>json</code>, <code>pickle</code>, <code>csv</code>, etc.).</li> </ul> </li> <li> <p>Unit Testing &amp; TDD</p> <ul> <li>Use <code>unittest</code>, <code>pytest</code>, and <code>mock</code> for professional-quality testing.</li> </ul> </li> </ol>"},{"location":"cheatsheet/concept/#bonus-pythonic-mindset","title":"\ud83e\udde0 Bonus: Pythonic Mindset","text":"JavaScript Style Pythonic Style Verbose logic List comprehensions, readable logic Class-heavy OOP Mix OOP and functional as needed Promise chaining <code>await</code> with <code>async def</code> Manual loops Use built-in functions (<code>sum</code>, <code>max</code>) Worry about <code>this</code> Use <code>self</code> with no surprises"},{"location":"cheatsheet/concept/#suggested-learning-order","title":"\u2705 Suggested Learning Order","text":"<ol> <li> <p>\u2705 Basic syntax, types, functions, classes</p> </li> <li> <p>\u2705 List comprehensions, *args/**kwargs</p> </li> <li> <p>\ud83d\udd01 Iterators &amp; generators</p> </li> <li> <p>\ud83d\ude80 Decorators &amp; context managers</p> </li> <li> <p>\ud83d\udd00 AsyncIO</p> </li> <li> <p>\ud83e\udde0 Type hinting, error handling, file I/O</p> </li> <li> <p>\ud83e\uddf1 OOP + Data Classes</p> </li> <li> <p>\ud83d\udd2c Testing + Packaging + Modules</p> </li> <li> <p>\u23f1 Threading/Multiprocessing</p> </li> <li> <p>\ud83d\udd2e Metaprogramming</p> </li> </ol> <p>Great question! If you're coming from a <code>JavaScript</code> background and wondering how concepts like Promises translate into <code>Python</code>, here\u2019s a breakdown of equivalent concepts, idioms, and features between the two languages.</p>"},{"location":"cheatsheet/concept/#js-concepts-and-their-python-equivalents","title":"\ud83d\udd01 JS Concepts and Their Python Equivalents","text":"JS Concept Python Equivalent Notes <code>Promise</code> <code>async</code> / <code>await</code> with <code>asyncio</code> Native async programming using <code>async def</code> + <code>await</code>. Callback functions Higher-order functions / <code>lambda</code> Functions are first-class in both languages. Event Loop <code>asyncio.get_event_loop()</code> Python's core async loop. <code>setTimeout</code>, <code>setInterval</code> <code>asyncio.sleep()</code>, schedulers For delays and scheduling tasks. <code>fetch()</code> <code>aiohttp</code>, <code>httpx</code>, <code>requests</code> Async and sync HTTP libraries in Python. <code>.then()</code>, <code>.catch()</code> <code>await</code>, <code>try</code> / <code>except</code> Python uses exception handling blocks. <code>async function</code> <code>async def</code> Declares a coroutine in Python. <code>EventEmitter</code> <code>asyncio.Event</code>, <code>pyee</code> <code>pyee</code> is a popular EventEmitter-like lib for Python. <code>console.log()</code> <code>print()</code> Basic output in both languages. Arrow functions <code>lambda</code>, or <code>def</code> <code>lambda</code> is limited; use <code>def</code> for more complex logic. <code>import</code> / <code>export</code> <code>import</code>, <code>from ... import ...</code> Python uses <code>import</code> statements for modules. <code>typeof</code> <code>type()</code> Use to inspect the type of a variable. <code>instanceof</code> <code>isinstance()</code> Checks an object's class/type. Destructuring Tuple unpacking <code>a, b = [1, 2]</code> style unpacking. <code>Object.keys()</code> <code>dict.keys()</code> Dictionary key listing. Spread operator <code>...</code> <code>*args</code>, <code>**kwargs</code> For unpacking and flexible arguments. <code>class</code> syntax <code>class</code> + <code>self</code> Similar, but <code>self</code> is explicit in Python. <code>new</code> keyword Not used Objects are instantiated without <code>new</code>. <code>this</code> keyword <code>self</code> Python uses <code>self</code> clearly and explicitly."},{"location":"cheatsheet/concept/#deep-dive-concepts-in-python-you-should-learn-after-promises","title":"\ud83e\udde0 Deep-Dive Concepts in Python (You Should Learn After Promises)","text":"Topic Description AsyncIO Python\u2019s built-in library for async/await programming. Generators Like iterators, but you use <code>yield</code>. Good for lazy evaluation and streaming. Context Managers Use <code>with</code> statement for clean resource handling (e.g., files, DB, locks). Decorators Functions that wrap other functions (<code>@decorator</code>). Similar to HOFs. Metaclasses Advanced OOP: control class creation. Rarely needed early on. Coroutines Functions declared with <code>async def</code> and awaited. Threading &amp; Multiprocessing For parallelism, concurrency beyond async. Type Hinting (PEP 484) Python is dynamically typed, but supports static typing with <code>mypy</code>, etc. Duck Typing \"If it walks like a duck...\" \u2014 no need for interfaces; just behavior matters. <p>A JavaScript Promise is conceptually equivalent to a Python coroutine or awaitable \u2014 they both represent future asynchronous results.</p>"},{"location":"cheatsheet/differences/","title":"Differences","text":""},{"location":"cheatsheet/differences/#differences","title":"Differences","text":""},{"location":"cheatsheet/differences/#key-differences-between-python-and-javascript","title":"\ud83d\udea8 Key Differences Between Python and JavaScript","text":"<ol> <li> <p>Whitespace Matters in Python</p> <ul> <li>JS: Uses <code>{}</code> to define blocks.</li> <li>Python: Uses indentation (tabs or spaces).</li> </ul> javascript<pre><code>if (x &gt; 0) {\n  console.log(\"positive\");\n}\n</code></pre> python<pre><code>if x &gt; 0:\n    print(\"positive\")\n</code></pre> </li> <li> <p>Variable Declaration</p> <ul> <li>JS: <code>let</code>, <code>const</code>, <code>var</code></li> <li>Python: Just write the variable name (type is dynamic)</li> </ul> javascript<pre><code>let x = 5;\n</code></pre> python<pre><code>x = 5\n</code></pre> </li> <li> <p>Function Syntax</p> javascript<pre><code>function add(a, b) {\n  return a + b;\n}\n</code></pre> python<pre><code>def add(a, b):\n    return a + b\n</code></pre> </li> <li> <p>No <code>this</code>, less confusion</p> <ul> <li>Python uses <code>self</code> explicitly in class methods.</li> <li>No <code>this</code> binding nightmares like in JS.</li> </ul> </li> <li> <p>No semicolons or parentheses</p> <ul> <li>Cleaner syntax; rarely uses semicolons.</li> <li>Conditions don't need <code>()</code>.</li> </ul> </li> <li> <p>Python is strongly typed</p> <ul> <li>JS lets you do <code>\"5\" + 1</code> \u2192 <code>\"51\"</code></li> <li>Python throws an error \u2192 <code>TypeError</code></li> </ul> </li> </ol>"},{"location":"cheatsheet/differences/#concepts-to-master-in-python-coming-from-javascript","title":"\ud83d\udd11 Concepts to Master in Python (Coming from JavaScript)","text":"<p>\ud83d\udd24 1. Data Types and Structures</p> <ul> <li><code>list</code>, <code>dict</code>, <code>tuple</code>, <code>set</code></li> <li>Immutability: tuples vs lists</li> <li>Comprehensions (<code>[x for x in items]</code>, <code>{k: v for ...}</code>)</li> </ul> <p>\ud83d\udd01 2. Loops and Iteration</p> <ul> <li><code>for x in list</code>, <code>enumerate()</code>, <code>zip()</code>, <code>range()</code></li> <li><code>map()</code>, <code>filter()</code>, <code>lambda</code></li> </ul> <p>\ud83d\udce6 3. Functions and Scope</p> <ul> <li><code>def</code>, <code>*args</code>, <code>**kwargs</code></li> <li>Closures, decorators (like JS higher-order functions)</li> </ul> <p>\ud83e\uddf1 4. OOP (Object-Oriented Programming)</p> <ul> <li>Classes, <code>self</code>, inheritance</li> <li><code>@classmethod</code>, <code>@staticmethod</code>, <code>@property</code></li> </ul> <p>\ud83d\udcda 5. Modules and Packages</p> <ul> <li><code>import math</code>, <code>from x import y</code></li> <li>Using <code>pip</code>, <code>venv</code>, and Python environments</li> </ul> <p>\ud83d\udd27 6. Error Handling</p> <ul> <li>Python: <code>try/except/finally</code></li> <li>JS: <code>try/catch/finally</code></li> </ul> <p>\ud83e\uddea 7. Testing and Tooling</p> <ul> <li><code>unittest</code>, <code>pytest</code></li> <li>Linting with <code>flake8</code>, formatting with <code>black</code></li> </ul> <p>\ud83d\udca1 8. Idiomatic Python (a.k.a. \u201cPythonic\u201d Code)</p> <ul> <li>Readability first: \"There should be one \u2014 and preferably only one \u2014 obvious way to do it.\"</li> <li>Use list comprehensions, unpacking, meaningful names, avoid over-engineering</li> </ul>"},{"location":"cheatsheet/differences/#next-steps","title":"\ud83e\uddd7\u200d\u2642\ufe0f Next Steps","text":"<ol> <li>Write code daily \u2013 Solve small problems.</li> <li>Build projects \u2013 Web apps (Flask, Django), scripts, automation.</li> <li>Read others\u2019 Python code \u2013 Open source or GitHub.</li> <li>Read the Zen of Python \u2013 <code>import this</code></li> </ol>"},{"location":"cheatsheet/js-vs-py/","title":"JS vs PY","text":""},{"location":"cheatsheet/js-vs-py/#javascript-vs-python-side-by-side-cheat-sheet","title":"JavaScript vs Python side-by-side cheat sheet","text":"<p>Here's a handy JavaScript vs Python side-by-side cheat sheet \u2014 perfect for quick comparisons as you switch gears.</p>"},{"location":"cheatsheet/js-vs-py/#1-variable-declaration","title":"\ud83d\udcdd 1. Variable Declaration","text":"Concept JavaScript Python Declare a variable <code>let x = 5;</code> or <code>const x = 5;</code> <code>x = 5</code> Dynamic typing Yes Yes"},{"location":"cheatsheet/js-vs-py/#2-data-types","title":"\ud83e\uddee 2. Data Types","text":"Type JavaScript Python Number <code>let x = 42;</code> <code>x = 42</code> String <code>\"hello\"</code> or <code>'hello'</code> <code>\"hello\"</code> or <code>'hello'</code> Boolean <code>true</code>, <code>false</code> <code>True</code>, <code>False</code> Null / None <code>null</code> <code>None</code> Array / List <code>[1, 2, 3]</code> <code>[1, 2, 3]</code> Object / Dict <code>{a: 1}</code> <code>{\"a\": 1}</code> Undefined <code>undefined</code> No equivalent"},{"location":"cheatsheet/js-vs-py/#3-conditionals","title":"\ud83d\udd01 3. Conditionals","text":"JavaScript Python <code>if (x &gt; 10) { ... }</code> <code>if x &gt; 10:</code> <code>else if</code> <code>elif</code> <code>===</code> (strict equality) <code>==</code> <code>!==</code> <code>!=</code> Logical AND / OR: <code>&amp;&amp;</code>, <code>\\|\\|</code> <code>and</code>, <code>or</code>"},{"location":"cheatsheet/js-vs-py/#4-loops","title":"\ud83d\udd04 4. Loops","text":"JavaScript Python <code>for (let i = 0; i &lt; 5; i++)</code> <code>for i in range(5):</code> <code>for (let item of list)</code> <code>for item in list:</code> <code>while (x &lt; 10)</code> <code>while x &lt; 10:</code> <code>break</code>, <code>continue</code> Same"},{"location":"cheatsheet/js-vs-py/#5-functions","title":"\ud83d\udd27 5. Functions","text":"JavaScript Python <code>function add(a, b) { return a + b; }</code> <code>def add(a, b): return a + b</code> Arrow function: <code>(a, b) =&gt; a + b</code> Lambda: <code>lambda a, b: a + b</code> <code>function greet(name = \"John\")</code> <code>def greet(name=\"John\")</code>"},{"location":"cheatsheet/js-vs-py/#6-objects-vs-dictionaries","title":"\ud83e\uddf0 6. Objects vs Dictionaries","text":"JavaScript Python <code>let person = {name: \"Ana\"}</code> <code>person = {\"name\": \"Ana\"}</code> <code>person.name</code> or <code>person[\"name\"]</code> <code>person[\"name\"]</code>"},{"location":"cheatsheet/js-vs-py/#7-arrayslists","title":"\ud83d\udce6 7. Arrays/Lists","text":"JavaScript Python <code>arr.length</code> <code>len(arr)</code> <code>arr.push(4)</code> <code>arr.append(4)</code> <code>arr.map(x =&gt; x * 2)</code> <code>map(lambda x: x * 2, arr)</code> or <code>[x * 2 for x in arr]</code> <code>arr.filter(x =&gt; x &gt; 0)</code> <code>filter(...)</code> or list comprehension"},{"location":"cheatsheet/js-vs-py/#8-classes-oop","title":"\ud83d\udcda 8. Classes &amp; OOP","text":"JavaScript Python <code>class Dog { constructor() {} }</code> <code>class Dog:\\n    def __init__(self):</code> <code>this.name = name</code> <code>self.name = name</code> Method call: <code>dog.bark()</code> Same: <code>dog.bark()</code>"},{"location":"cheatsheet/js-vs-py/#9-common-built-ins","title":"\ud83c\udfaf 9. Common Built-ins","text":"Task JavaScript Python Print to console <code>console.log(x)</code> <code>print(x)</code> Length of item <code>arr.length</code> <code>len(arr)</code> Get keys of object <code>Object.keys(obj)</code> <code>obj.keys()</code> Convert to string <code>String(5)</code> <code>str(5)</code>"},{"location":"cheatsheet/js-vs-py/#10-error-handling","title":"\u26a0\ufe0f 10. Error Handling","text":"JavaScript Python <code>try { ... } catch(e) { ... }</code> <code>try:\\n    ...\\nexcept Exception as e:</code>"},{"location":"cheatsheet/js-vs-py/#pythonic-tips-vs-js-thinking","title":"\ud83e\udde0 Pythonic Tips (vs JS Thinking)","text":"JS Habit Pythonic Way Use <code>for</code> loop with index <code>for i, item in enumerate(list)</code> Create arrays manually Use list comprehensions <code>==</code> vs <code>===</code> confusion Just use <code>==</code> (Python handles type well) Arrow functions everywhere Prefer <code>def</code>, but use <code>lambda</code> for short cases <code>let</code> vs <code>const</code> decisions Python variables are reassigned freely"},{"location":"cheatsheet/similarities/","title":"Similarities","text":""},{"location":"cheatsheet/similarities/#similarities-between-python-and-javascript","title":"\ud83d\udd01 Similarities Between Python and JavaScript","text":"<p>Great question \u2014 coming from JavaScript to Python gives you a solid head start.</p> <p>You already understand core programming concepts, and many things will feel familiar.</p> <p>But there are key differences in philosophy, syntax, and behavior that you\u2019ll want to grasp to really \u201cthink in Python.\u201d</p> Concept JavaScript Python Variable declaration <code>let</code>, <code>const</code>, <code>var</code> Just variable name Functions <code>function()</code> or arrow <code>()=&gt;</code> <code>def</code> keyword Conditionals <code>if</code>, <code>else if</code>, <code>else</code> <code>if</code>, <code>elif</code>, <code>else</code> Loops <code>for</code>, <code>while</code>, <code>for..in</code> <code>for</code>, <code>while</code>, <code>for..in</code> Objects/Dictionaries <code>{ key: value }</code> <code>{ key: value }</code> (<code>dict</code>) Arrays/Lists <code>[1, 2, 3]</code> <code>[1, 2, 3]</code> (<code>list</code>) JSON handling <code>JSON.stringify()</code>, <code>JSON.parse()</code> <code>json.dumps()</code>, <code>json.loads()</code> Classes <code>class MyClass {}</code> <code>class MyClass:</code> First-class functions Functions are values Same in Python"}]}